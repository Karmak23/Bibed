#!/usr/bin/env -S python -O
'''
Bibed — main application launcher
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Should installed or linked in :path:`/usr/bin`, or anywhere executable
programs live.

..  This file is part of the Bibed program.

    Bibed is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as
    published by the Free Software Foundation, version 3.

    Bibed is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public
    License version 3 along with Bibed. If not, see
    https://www.gnu.org/licenses/gpl-3.0.html

:copyright:
        * 2019 Olivier Cortès <olive@cocoliv.es>
        * 2019 Collectif Cocoliv.es <contact@cocoliv.es>

:license: GNU GPL version 3

'''

import sys
import time
import logging
import logging.handlers

from bibed.foundations import GZipRotator, GZipNamer
from bibed.user import BIBED_LOG_FILE


LOGGER = logging.getLogger(__name__)


def setup_logging(level=logging.INFO):

    root = logging.getLogger()
    root.setLevel(level)

    formatter = logging.Formatter(
        '%(asctime)s [%(levelname)s] %(name)s: %(message)s')

    ch = logging.StreamHandler(sys.stdout)
    ch.setLevel(level)
    ch.setFormatter(formatter)
    root.addHandler(ch)

    rfh = logging.handlers.RotatingFileHandler(BIBED_LOG_FILE, backupCount=10)
    # File log is always full debug level
    # in case we need it to assist users.
    rfh.setLevel(logging.DEBUG)
    rfh.setFormatter(formatter)
    rfh.rotator = GZipRotator()
    rfh.namer = GZipNamer()

    # Rotate logs at every application launch.
    rfh.doRollover()

    mh = logging.handlers.MemoryHandler(32768)
    mh.setTarget(rfh)

    root.addHandler(mh)

    return (mh, rfh)


if __name__ == '__main__':
    time_start = time.time()

    if __debug__:
        logging_handlers = setup_logging(logging.DEBUG)
    else:
        logging_handlers = setup_logging(logging.INFO)

    logging.getLogger('urllib3').setLevel(logging.CRITICAL)
    logging.getLogger('pyinotify').setLevel(logging.CRITICAL)
    logging.getLogger('bibtexparser').setLevel(logging.CRITICAL)

    from bibed.locale import _, init as locale_init
    locale_init()

    # Needs to be after setup_logging(),
    # else we miss a lot of message.
    from bibed.parallel import run_and_wait_on
    from bibed.strings import seconds_to_string
    from bibed.gtk import Gtk  # NOQA
    from bibed.gui.splash import start_splash
    from bibed.app import BibEdApplication
    from bibed.preferences import gpod
    from bibed.sentry import sentry

    splash = start_splash()

    if gpod('use_sentry'):
        splash.set_status(
            _('Connecting issue collector to {}…').format(
                gpod('sentry_url')))

        run_and_wait_on(sentry.enable)

        LOGGER.debug('Sentry startup time: {}'.format(
            seconds_to_string(time.time() - time_start)))

    app = BibEdApplication(time_start=time_start, splash=splash,
                           logging_handlers=logging_handlers)

    exit_status = app.run(sys.argv)
    sys.exit(exit_status)
